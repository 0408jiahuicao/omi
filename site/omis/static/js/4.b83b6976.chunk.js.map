{"version":3,"sources":["../static/js/4.b83b6976.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","52","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/4.b83b6976.chunk.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 52:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Omis\\n\\nOmis (读 /ˈomɪs/) 是函数式风格，自带 store 且 hyperscript 友好的组件框架，只有 3KB。\\n\\n* 函数式风格但非函数式编程 \\n* 结构-样式-行为分离\\n* hyperscript 视觉上更加友好\\n* 每个组件可以带有一个 store，去中心化\\n* 支持全局 store 共享数据，并且按需局部更新组件\\n* 每个组件 store 拥有 update 方法，执行该方法自定局部刷新组件\\n\\n[→ Omis 在线例子](https://codepen.io/collection/XjLaRo/)\\n\\n## 一分钟入门\\n\\n```jsx\\nimport { render, h } from 'omi'\\n\\nconst Counter = (props, store) => {\\n  return (\\n    <div>\\n      <button onClick={store.sub}>-</button>\\n      <span>{store.count}</span>\\n      <button onClick={store.add}>+</button>\\n    </div>\\n  )\\n}\\n\\nCounter.store = _ => {\\n  return {\\n    count: 1,\\n    add() {\\n      this.count++\\n      this.update()\\n    },\\n    sub() {\\n      this.count--\\n      this.update()\\n    }\\n  }\\n}\\n\\nCounter.css = `\\nspan{\\n  color: red;\\n}\\n`\\n\\nrender(<Counter />, 'body')\\n```\\n\\n也可以直接使用 hyperscript，无需任何编译直接运行:\\n\\n```js\\nconst Counter = (props, store) => {\\n  return (\\n    h('div', {}, [\\n      h('button', { onClick: store.sub }, '-'),\\n      h('span', {}, store.count),\\n      h('button', { onClick: store.add }, '+')\\n    ])\\n  )\\n}\\n```\\n\\n恭喜你已经入门！\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/4.b83b6976.chunk.js","module.exports = \"## Omis\\n\\nOmis (读 /ˈomɪs/) 是函数式风格，自带 store 且 hyperscript 友好的组件框架，只有 3KB。\\n\\n* 函数式风格但非函数式编程 \\n* 结构-样式-行为分离\\n* hyperscript 视觉上更加友好\\n* 每个组件可以带有一个 store，去中心化\\n* 支持全局 store 共享数据，并且按需局部更新组件\\n* 每个组件 store 拥有 update 方法，执行该方法自定局部刷新组件\\n\\n[→ Omis 在线例子](https://codepen.io/collection/XjLaRo/)\\n\\n## 一分钟入门\\n\\n```jsx\\nimport { render, h } from 'omi'\\n\\nconst Counter = (props, store) => {\\n  return (\\n    <div>\\n      <button onClick={store.sub}>-</button>\\n      <span>{store.count}</span>\\n      <button onClick={store.add}>+</button>\\n    </div>\\n  )\\n}\\n\\nCounter.store = _ => {\\n  return {\\n    count: 1,\\n    add() {\\n      this.count++\\n      this.update()\\n    },\\n    sub() {\\n      this.count--\\n      this.update()\\n    }\\n  }\\n}\\n\\nCounter.css = `\\nspan{\\n  color: red;\\n}\\n`\\n\\nrender(<Counter />, 'body')\\n```\\n\\n也可以直接使用 hyperscript，无需任何编译直接运行:\\n\\n```js\\nconst Counter = (props, store) => {\\n  return (\\n    h('div', {}, [\\n      h('button', { onClick: store.sub }, '-'),\\n      h('span', {}, store.count),\\n      h('button', { onClick: store.add }, '+')\\n    ])\\n  )\\n}\\n```\\n\\n恭喜你已经入门！\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 52\n// module chunks = 4"],"sourceRoot":""}