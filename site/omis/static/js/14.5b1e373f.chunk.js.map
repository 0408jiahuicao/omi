{"version":3,"sources":["../static/js/14.5b1e373f.chunk.js","docs/en/introduction.md"],"names":["webpackJsonp","42","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/14.5b1e373f.chunk.js","sourcesContent":["webpackJsonp([14],{\n\n/***/ 42:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## What's Omis ？\\n\\nOmis (pronounced /ˈomɪs/) is Functional Style, Easy Store and Hyperscript Component Framework in 3KB.\\n\\n* Functional style but non-functional programming\\n* Structure-Style-Behavior Separation\\n* Hyperscript is visually more friendly\\n* Each component can have a store and be de-centralized\\n* Stores of each component can rely on global stores and be centralized\\n* Each component store has an update method that executes the method to customize local refresh components\\n\\n[→ Omis Codepen Demos](https://codepen.io/collection/XjLaRo/)\\n\\n## Add Omi in One Minute\\n\\n```jsx\\nimport { render, h } from 'omi'\\n\\nconst Counter = (props, store) => {\\n  return (\\n    <div>\\n      <button onClick={store.sub}>-</button>\\n      <span>{store.count}</span>\\n      <button onClick={store.add}>+</button>\\n    </div>\\n  )\\n}\\n\\nCounter.store = _ => {\\n  return {\\n    count: 1,\\n    add() {\\n      this.count++\\n      this.update()\\n    },\\n    sub() {\\n      this.count--\\n      this.update()\\n    }\\n  }\\n}\\n\\nCounter.css = `\\nspan{\\n  color: red;\\n}\\n`\\n\\nrender(<Counter />, 'body')\\n```\\n\\nYou can also use hyperscript **with no build tooling**:\\n\\n```js\\nconst Counter = (props, store) => {\\n  return (\\n    h('div', {}, [\\n      h('button', { onClick: store.sub }, '-'),\\n      h('span', {}, store.count),\\n      h('button', { onClick: store.add }, '+')\\n    ])\\n  )\\n}\\n```\\n\\nYou're already getting started! Congratulations!\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/14.5b1e373f.chunk.js","module.exports = \"## What's Omis ？\\n\\nOmis (pronounced /ˈomɪs/) is Functional Style, Easy Store and Hyperscript Component Framework in 3KB.\\n\\n* Functional style but non-functional programming\\n* Structure-Style-Behavior Separation\\n* Hyperscript is visually more friendly\\n* Each component can have a store and be de-centralized\\n* Stores of each component can rely on global stores and be centralized\\n* Each component store has an update method that executes the method to customize local refresh components\\n\\n[→ Omis Codepen Demos](https://codepen.io/collection/XjLaRo/)\\n\\n## Add Omi in One Minute\\n\\n```jsx\\nimport { render, h } from 'omi'\\n\\nconst Counter = (props, store) => {\\n  return (\\n    <div>\\n      <button onClick={store.sub}>-</button>\\n      <span>{store.count}</span>\\n      <button onClick={store.add}>+</button>\\n    </div>\\n  )\\n}\\n\\nCounter.store = _ => {\\n  return {\\n    count: 1,\\n    add() {\\n      this.count++\\n      this.update()\\n    },\\n    sub() {\\n      this.count--\\n      this.update()\\n    }\\n  }\\n}\\n\\nCounter.css = `\\nspan{\\n  color: red;\\n}\\n`\\n\\nrender(<Counter />, 'body')\\n```\\n\\nYou can also use hyperscript **with no build tooling**:\\n\\n```js\\nconst Counter = (props, store) => {\\n  return (\\n    h('div', {}, [\\n      h('button', { onClick: store.sub }, '-'),\\n      h('span', {}, store.count),\\n      h('button', { onClick: store.add }, '+')\\n    ])\\n  )\\n}\\n```\\n\\nYou're already getting started! Congratulations!\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/introduction.md\n// module id = 42\n// module chunks = 14"],"sourceRoot":""}