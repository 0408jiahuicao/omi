{"version":3,"sources":["../static/js/13.f6991a09.chunk.js","docs/en/introduction.md"],"names":["webpackJsonp","45","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/13.f6991a09.chunk.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ 45:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## What's Omiu ?\\n\\nOmiu is a cross framework UI component library developed based on [OMI](https://github.com/tencent/omi), which outputs custom elements of standard web components. Any component can be used in any framework or frameless environment such as react, Vue, preact, OMI or native JS at the same time, which is very convenient. Overall, omiu has these characteristics:\\n\\n> [Omiu Codepen Collection](https://codepen.io/collection/XBJjke)\\n\\n* Cross frameworks \\n* High quality UI interaction details\\n* Integrated [all the MUI Icon](https://tencent.github.io/omi/components/icon/demos/icon.html)\\n* Mobile terminal and PC share one set of components\\n* Theme switching support at runtime (color, font, and fillets)\\n* Components directly decoupled, independently polished, independently released, independently quoted\\n* Extended HTML capabilities. You can pass false to an element through the string `'0'` or the string `'false'`\\n\\n## Usage\\n\\n### Install by script\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script src=\\\"https://unpkg.com/@omiu/button\\\"></script>\\n\\n<o-button>I am button</o-button>\\n```\\n\\n### Install by npm\\n\\n``` bash\\nnpm install @omiu/button\\n```\\n\\nImport to use it:\\n\\n```js\\nimport '@omiu/button'\\n```\\n\\nThen use it in any framework, such as Omi, react, Vue or angular:\\n\\n``` html\\n<o-button>I am button</o-button>\\n```\\n\\nYou can also use native JS:\\n\\n```js\\nvar button = document.createElement('o-button')\\nbutton.innerHTML = 'I am omiu button'\\ndocument.body.append(button)\\nbutton.addEventListener('click', function () {\\n  console.log('Clicked!')\\n})\\n\\n//or\\n//document.body.innerHTML = '<o-button>I am omiu button</o-button>'\\n```\\n\\n## Change Theme\\n\\n```js\\nconst setTheme = Omiu.setTheme\\n\\nsetTheme('primary', '#07c160')\\nsetTheme('danger', '#f5222d')\\nsetTheme('surface', '#ffffff')\\nsetTheme('on-primary', '#ffffff')\\nsetTheme('on-danger', '#ffffff')\\nsetTheme('on-surface', '#000000')\\nsetTheme('background', '#ffffff')\\nsetTheme('small-radius', '4px')\\nsetTheme('medium-radius', '4px')\\nsetTheme('large-radius', '0px')\\nsetTheme('font-family', '-apple-system-font,\\\"Helvetica Neue\\\",sans-serif')\\n```\\n\\nor\\n\\n```js\\nOmiu.setThemePrimary('green')\\nOmiu.setThemeError('red')\\n```\\n\\n\\n\\n## HTML Extension \\n\\nWhen the default value is true and you need to pass false to the element, it used to be a historical problem. OMI has solved this problem perfectly. You can set it through the string `'0'` or the string `'false'`.\\n\\n```js\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n    show: true\\n  }\\n\\n static propTypes = {\\n    show: Boolean\\n  }\\n\\n  render(props) {\\n    ...\\n    ...\\n  }\\n})\\n```\\n\\nUse:\\n\\n```html\\n<my-element show=\\\"false\\\"></my-element>\\n```\\n\\nor\\n\\n```html\\n<my-element show=\\\"0\\\"></my-element>\\n```\\n\\n## Using omiu in react\\n\\n```jsx\\n/** @jsx nativeEvents */\\nimport nativeEvents from 'jsx-native-events'\\nimport { useState } from 'react'\\nimport '@omiu/icon-button'\\n\\nexport default function SomeComponent(props) {\\n    const [result, setSwitch] = useState(false)\\n\\n    return (\\n      <div>\\n        <p>The switch is {result ? 'on' : 'off'}</p>\\n        <o-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" onEventChange={e => setSwitch(e.detail.isOn)}>\\n        </o-icon-button>\\n      </div>\\n    )\\n}\\n```\\n\\nMany thanks to calebdwilliams's [jsx-native-events](https://github.com/calebdwilliams/jsx-native-events#readme)。\\n\\n## Using omiu in Vue\\n\\n```html\\n<script>\\nimport '@omiu/icon-button'\\n\\nexport default {\\n  name: 'HelloWorld',\\n  data: function() {\\n    return {\\n      result: false\\n    }\\n  },\\n  methods: {\\n    myEvent: function(evt) {\\n      this.result = evt.detail.isOn\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\\\"component\\\">\\n    <p>The switch is {{result? 'on' : 'off'}}</p>\\n    <o-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" @change=\\\"myEvent\\\"></o-icon-button>\\n  </div>\\n</template>\\n```\\n\\n\\n## Contribution\\n\\nBuild:\\n\\n```bash\\nnpm run build\\n```\\n\\nBuild Demo:\\n\\n```bash\\nnpm start \\n```\\n\\nPublic to npm:\\n\\n```bash\\nnpm publish --access public\\n```\\n\\n\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/13.f6991a09.chunk.js","module.exports = \"## What's Omiu ?\\n\\nOmiu is a cross framework UI component library developed based on [OMI](https://github.com/tencent/omi), which outputs custom elements of standard web components. Any component can be used in any framework or frameless environment such as react, Vue, preact, OMI or native JS at the same time, which is very convenient. Overall, omiu has these characteristics:\\n\\n> [Omiu Codepen Collection](https://codepen.io/collection/XBJjke)\\n\\n* Cross frameworks \\n* High quality UI interaction details\\n* Integrated [all the MUI Icon](https://tencent.github.io/omi/components/icon/demos/icon.html)\\n* Mobile terminal and PC share one set of components\\n* Theme switching support at runtime (color, font, and fillets)\\n* Components directly decoupled, independently polished, independently released, independently quoted\\n* Extended HTML capabilities. You can pass false to an element through the string `'0'` or the string `'false'`\\n\\n## Usage\\n\\n### Install by script\\n\\n```html\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\n<script src=\\\"https://unpkg.com/@omiu/button\\\"></script>\\n\\n<o-button>I am button</o-button>\\n```\\n\\n### Install by npm\\n\\n``` bash\\nnpm install @omiu/button\\n```\\n\\nImport to use it:\\n\\n```js\\nimport '@omiu/button'\\n```\\n\\nThen use it in any framework, such as Omi, react, Vue or angular:\\n\\n``` html\\n<o-button>I am button</o-button>\\n```\\n\\nYou can also use native JS:\\n\\n```js\\nvar button = document.createElement('o-button')\\nbutton.innerHTML = 'I am omiu button'\\ndocument.body.append(button)\\nbutton.addEventListener('click', function () {\\n  console.log('Clicked!')\\n})\\n\\n//or\\n//document.body.innerHTML = '<o-button>I am omiu button</o-button>'\\n```\\n\\n## Change Theme\\n\\n```js\\nconst setTheme = Omiu.setTheme\\n\\nsetTheme('primary', '#07c160')\\nsetTheme('danger', '#f5222d')\\nsetTheme('surface', '#ffffff')\\nsetTheme('on-primary', '#ffffff')\\nsetTheme('on-danger', '#ffffff')\\nsetTheme('on-surface', '#000000')\\nsetTheme('background', '#ffffff')\\nsetTheme('small-radius', '4px')\\nsetTheme('medium-radius', '4px')\\nsetTheme('large-radius', '0px')\\nsetTheme('font-family', '-apple-system-font,\\\"Helvetica Neue\\\",sans-serif')\\n```\\n\\nor\\n\\n```js\\nOmiu.setThemePrimary('green')\\nOmiu.setThemeError('red')\\n```\\n\\n\\n\\n## HTML Extension \\n\\nWhen the default value is true and you need to pass false to the element, it used to be a historical problem. OMI has solved this problem perfectly. You can set it through the string `'0'` or the string `'false'`.\\n\\n```js\\ndefine('my-element', class extends WeElement {\\n  static defaultProps = {\\n    show: true\\n  }\\n\\n static propTypes = {\\n    show: Boolean\\n  }\\n\\n  render(props) {\\n    ...\\n    ...\\n  }\\n})\\n```\\n\\nUse:\\n\\n```html\\n<my-element show=\\\"false\\\"></my-element>\\n```\\n\\nor\\n\\n```html\\n<my-element show=\\\"0\\\"></my-element>\\n```\\n\\n## Using omiu in react\\n\\n```jsx\\n/** @jsx nativeEvents */\\nimport nativeEvents from 'jsx-native-events'\\nimport { useState } from 'react'\\nimport '@omiu/icon-button'\\n\\nexport default function SomeComponent(props) {\\n    const [result, setSwitch] = useState(false)\\n\\n    return (\\n      <div>\\n        <p>The switch is {result ? 'on' : 'off'}</p>\\n        <o-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" onEventChange={e => setSwitch(e.detail.isOn)}>\\n        </o-icon-button>\\n      </div>\\n    )\\n}\\n```\\n\\nMany thanks to calebdwilliams's [jsx-native-events](https://github.com/calebdwilliams/jsx-native-events#readme)。\\n\\n## Using omiu in Vue\\n\\n```html\\n<script>\\nimport '@omiu/icon-button'\\n\\nexport default {\\n  name: 'HelloWorld',\\n  data: function() {\\n    return {\\n      result: false\\n    }\\n  },\\n  methods: {\\n    myEvent: function(evt) {\\n      this.result = evt.detail.isOn\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\\\"component\\\">\\n    <p>The switch is {{result? 'on' : 'off'}}</p>\\n    <o-icon-button color=\\\"red\\\" icons=\\\"['favorite', 'favorite_border']\\\" @change=\\\"myEvent\\\"></o-icon-button>\\n  </div>\\n</template>\\n```\\n\\n\\n## Contribution\\n\\nBuild:\\n\\n```bash\\nnpm run build\\n```\\n\\nBuild Demo:\\n\\n```bash\\nnpm start \\n```\\n\\nPublic to npm:\\n\\n```bash\\nnpm publish --access public\\n```\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/introduction.md\n// module id = 45\n// module chunks = 13"],"sourceRoot":""}