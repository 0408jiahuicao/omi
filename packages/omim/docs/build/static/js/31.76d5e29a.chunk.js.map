{"version":3,"sources":["../static/js/31.76d5e29a.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","113","module","exports"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/31.76d5e29a.chunk.js","sourcesContent":["webpackJsonp([31],{\n\n/***/ 113:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# Omim\\r\\n\\r\\n[Omi](https://github.com/Tencent/omi) 打造的 Material Design 框架无关标准组件，任意框架都可以使用。\\r\\n\\r\\n![](https://tencent.github.io/omi/packages/omim/assets/pv4.jpeg?a=1)\\r\\n\\r\\n## 特性\\r\\n\\r\\n* 使用标准 Web Components 的 Custom Elements 渲染 \\r\\n* 任意框架都可以使用这些组件(比如 Omi, React, Vue and Angular)\\r\\n* 同时支持 JSX 和 原生 HTML 标签的使用方式 \\r\\n* 每个组件可以单独使用\\r\\n* 超级容易更换主题颜色、字体和圆角\\r\\n* 扩展了 HTML 能力，你可以通过字符串 `'0'` 或者字符串 `'false'` 传递 false 给元素\\r\\n\\r\\n## 使用指南\\r\\n\\r\\n### 通过 script\\r\\n\\r\\n```html\\r\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\r\\n<script src=\\\"https://unpkg.com/@omim/core@latest/button/index.js\\\"></script>\\r\\n\\r\\n<m-button>I am button</m-button>\\r\\n```\\r\\n\\r\\n### 通过 npm\\r\\n\\r\\n``` bash\\r\\nnpm install @omim/core\\r\\n```\\r\\n\\r\\nThen:\\r\\n\\r\\n```js\\r\\nimport '@omim/core/button'\\r\\n```\\r\\n\\r\\n然后在任意框架中使用，比如 Omi, React, Vue or Angular:\\r\\n\\r\\n``` html\\r\\n<m-button>I am button</m-button>\\r\\n```\\r\\n\\r\\nIt can also be used in pure js:\\r\\n\\r\\n```js\\r\\nvar button = document.createElement('m-button')\\r\\nbutton.innerHTML = 'I am button'\\r\\ndocument.body.append(button)\\r\\nbutton.addEventListener('click', function () {\\r\\n  console.log('Clicked!')\\r\\n})\\r\\n\\r\\n//or\\r\\n//document.body.innerHTML = '<m-button>I am button</m-button>'\\r\\n```\\r\\n\\r\\n## 更改主题\\r\\n\\r\\n```js\\r\\ndocument.body.style.setProperty('--mdc-theme-primary', 'red')\\r\\ndocument.body.style.setProperty('--mdc-theme-secondary', 'blue')\\r\\ndocument.body.style.setProperty('--mdc-theme-error', 'yellow')\\r\\n```\\r\\n\\r\\n所有配置如下:\\r\\n\\r\\n```css\\r\\n--mdc-theme-primary: #0072d9;\\r\\n--mdc-theme-secondary: #2170b8;\\r\\n--mdc-theme-error: #f5222d;\\r\\n--mdc-theme-surface: #ffffff;\\r\\n--mdc-theme-on-primary: #ffffff;\\r\\n--mdc-theme-on-secondary: #ffffff;\\r\\n--mdc-theme-on-error: #ffffff;\\r\\n--mdc-theme-on-surface: #000000;\\r\\n--mdc-theme-background: #ffffff;\\r\\n--mdc-shape-small-component-radius: 4px;\\r\\n--mdc-shape-medium-component-radius: 4px;\\r\\n--mdc-shape-large-component-radius: 0px;\\r\\n--mdc-typography--font-family: Roboto, sans-serif;\\r\\n```\\r\\n\\r\\n## HTML 扩展 \\r\\n\\r\\n当默认值为 true，需要传递 false 给 element 的时候，以前是历史难题，Omi 完美解决了这一点，你可以通过字符串 `'0'` 或者 字符串 `'false'` 来设置。\\r\\n\\r\\n```js\\r\\ndefine('my-element', class extends WeElement {\\r\\n  static defaultProps = {\\r\\n    show: true\\r\\n  }\\r\\n\\r\\n static propTypes = {\\r\\n    show: Boolean\\r\\n  }\\r\\n\\r\\n  render(props) {\\r\\n    ...\\r\\n    ...\\r\\n  }\\r\\n})\\r\\n```\\r\\n\\r\\nUse:\\r\\n\\r\\n```html\\r\\n<my-element show=\\\"false\\\"></my-element>\\r\\n```\\r\\n\\r\\nor\\r\\n\\r\\n```html\\r\\n<my-element show=\\\"0\\\"></my-element>\\r\\n```\\r\\n\\r\\n## 贡献\\r\\n\\r\\n### 一些命令\\r\\n\\r\\nBuild 组件:\\r\\n\\r\\n```bash\\r\\nnpm run build -- component-name\\r\\n```\\r\\n\\r\\nBuild 所有组件:\\r\\n\\r\\n```bash\\r\\nnpm run build-all\\r\\n```\\r\\n\\r\\nBuild 例子:\\r\\n\\r\\n```bash\\r\\nnpm start demo-name\\r\\n```\\r\\n\\r\\n发布:\\r\\n\\r\\n```bash\\r\\nnpm publish --access public\\r\\n```\\r\\n\\r\\n## 相关链接\\r\\n\\r\\n* [material.io docs](https://material.io/develop/web/components/buttons/) \\r\\n* [material.io demo](https://material-components.github.io/material-components-web-catalog/#/) \\r\\n* [material-theme-builder](https://material-theme-builder.glitch.me/)\\r\\n* [material-components-web](https://github.com/material-components/material-components-web)\\r\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/31.76d5e29a.chunk.js","module.exports = \"# Omim\\r\\n\\r\\n[Omi](https://github.com/Tencent/omi) 打造的 Material Design 框架无关标准组件，任意框架都可以使用。\\r\\n\\r\\n![](https://tencent.github.io/omi/packages/omim/assets/pv4.jpeg?a=1)\\r\\n\\r\\n## 特性\\r\\n\\r\\n* 使用标准 Web Components 的 Custom Elements 渲染 \\r\\n* 任意框架都可以使用这些组件(比如 Omi, React, Vue and Angular)\\r\\n* 同时支持 JSX 和 原生 HTML 标签的使用方式 \\r\\n* 每个组件可以单独使用\\r\\n* 超级容易更换主题颜色、字体和圆角\\r\\n* 扩展了 HTML 能力，你可以通过字符串 `'0'` 或者字符串 `'false'` 传递 false 给元素\\r\\n\\r\\n## 使用指南\\r\\n\\r\\n### 通过 script\\r\\n\\r\\n```html\\r\\n<script src=\\\"https://unpkg.com/omi\\\"></script>\\r\\n<script src=\\\"https://unpkg.com/@omim/core@latest/button/index.js\\\"></script>\\r\\n\\r\\n<m-button>I am button</m-button>\\r\\n```\\r\\n\\r\\n### 通过 npm\\r\\n\\r\\n``` bash\\r\\nnpm install @omim/core\\r\\n```\\r\\n\\r\\nThen:\\r\\n\\r\\n```js\\r\\nimport '@omim/core/button'\\r\\n```\\r\\n\\r\\n然后在任意框架中使用，比如 Omi, React, Vue or Angular:\\r\\n\\r\\n``` html\\r\\n<m-button>I am button</m-button>\\r\\n```\\r\\n\\r\\nIt can also be used in pure js:\\r\\n\\r\\n```js\\r\\nvar button = document.createElement('m-button')\\r\\nbutton.innerHTML = 'I am button'\\r\\ndocument.body.append(button)\\r\\nbutton.addEventListener('click', function () {\\r\\n  console.log('Clicked!')\\r\\n})\\r\\n\\r\\n//or\\r\\n//document.body.innerHTML = '<m-button>I am button</m-button>'\\r\\n```\\r\\n\\r\\n## 更改主题\\r\\n\\r\\n```js\\r\\ndocument.body.style.setProperty('--mdc-theme-primary', 'red')\\r\\ndocument.body.style.setProperty('--mdc-theme-secondary', 'blue')\\r\\ndocument.body.style.setProperty('--mdc-theme-error', 'yellow')\\r\\n```\\r\\n\\r\\n所有配置如下:\\r\\n\\r\\n```css\\r\\n--mdc-theme-primary: #0072d9;\\r\\n--mdc-theme-secondary: #2170b8;\\r\\n--mdc-theme-error: #f5222d;\\r\\n--mdc-theme-surface: #ffffff;\\r\\n--mdc-theme-on-primary: #ffffff;\\r\\n--mdc-theme-on-secondary: #ffffff;\\r\\n--mdc-theme-on-error: #ffffff;\\r\\n--mdc-theme-on-surface: #000000;\\r\\n--mdc-theme-background: #ffffff;\\r\\n--mdc-shape-small-component-radius: 4px;\\r\\n--mdc-shape-medium-component-radius: 4px;\\r\\n--mdc-shape-large-component-radius: 0px;\\r\\n--mdc-typography--font-family: Roboto, sans-serif;\\r\\n```\\r\\n\\r\\n## HTML 扩展 \\r\\n\\r\\n当默认值为 true，需要传递 false 给 element 的时候，以前是历史难题，Omi 完美解决了这一点，你可以通过字符串 `'0'` 或者 字符串 `'false'` 来设置。\\r\\n\\r\\n```js\\r\\ndefine('my-element', class extends WeElement {\\r\\n  static defaultProps = {\\r\\n    show: true\\r\\n  }\\r\\n\\r\\n static propTypes = {\\r\\n    show: Boolean\\r\\n  }\\r\\n\\r\\n  render(props) {\\r\\n    ...\\r\\n    ...\\r\\n  }\\r\\n})\\r\\n```\\r\\n\\r\\nUse:\\r\\n\\r\\n```html\\r\\n<my-element show=\\\"false\\\"></my-element>\\r\\n```\\r\\n\\r\\nor\\r\\n\\r\\n```html\\r\\n<my-element show=\\\"0\\\"></my-element>\\r\\n```\\r\\n\\r\\n## 贡献\\r\\n\\r\\n### 一些命令\\r\\n\\r\\nBuild 组件:\\r\\n\\r\\n```bash\\r\\nnpm run build -- component-name\\r\\n```\\r\\n\\r\\nBuild 所有组件:\\r\\n\\r\\n```bash\\r\\nnpm run build-all\\r\\n```\\r\\n\\r\\nBuild 例子:\\r\\n\\r\\n```bash\\r\\nnpm start demo-name\\r\\n```\\r\\n\\r\\n发布:\\r\\n\\r\\n```bash\\r\\nnpm publish --access public\\r\\n```\\r\\n\\r\\n## 相关链接\\r\\n\\r\\n* [material.io docs](https://material.io/develop/web/components/buttons/) \\r\\n* [material.io demo](https://material-components.github.io/material-components-web-catalog/#/) \\r\\n* [material-theme-builder](https://material-theme-builder.glitch.me/)\\r\\n* [material-components-web](https://github.com/material-components/material-components-web)\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 113\n// module chunks = 31"],"sourceRoot":""}