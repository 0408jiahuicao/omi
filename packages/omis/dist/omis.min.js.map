{"version":3,"sources":["../src/style.js","../src/h.js","../src/util.js","../src/clone-element.js","../src/constants.js","../src/render-queue.js","../src/vdom/index.js","../src/dom/index.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/component.js","../src/vnode.js","../src/options.js","../src/render.js","../src/omis.js"],"names":["getCtorName","ctor","i","len","options","styleCache","length","item","attrName","styleId","push","scoper","css","prefix","toLowerCase","replace","RegExp","g0","g1","g2","g3","match","addStyle","cssText","id","ele","document","getElementById","head","getElementsByTagName","parentNode","removeChild","someThingStyles","createElement","appendChild","setAttribute","window","ActiveXObject","styleSheet","textContent","addStyleToHead","style","attr","staticStyleMapping","nodeName","attributes","lastSimple","child","simple","children","EMPTY_CHILDREN","arguments","stack","pop","String","p","VNode","runTimeComponent","constructor","props","elementId","key","vnode","extend","obj","applyRef","ref","value","current","cloneElement","h","slice","call","enqueueRender","component","IS_NON_DIMENSIONAL","_dirty","items","rerender","node","hydrating","renderComponent","splitText","undefined","normalizedNodeName","isNamedNode","defaultProps","createNode","name","old","isSvg","test","__html","substring","eventProxy","useCapture","removeEventListener","removeAttribute","ns","addEventListener","_listeners","setAttributeNS","removeAttributeNS","event","e","mounts","c","afterMount","componentDidMount","parent","dom","mountAll","componentRoot","diffLevel","isSvgMode","flushMounts","out","prevSvgMode","idiff","createTextNode","replaceChild","recollectNodeTree","__p","nodeValue","vnodeName","buildComponentFromVNode","firstChild","vchildren","fc","ATTR_KEY","innerDiffNode","dangerouslySetInnerHTML","store","context","isHydrating","j","f","vchild","originalChildren","childNodes","keyed","keyedLen","min","childrenLen","_child","_component","__key","vlen","trim","removeNode","insertBefore","unmountOnly","unmountComponent","removeChildren","next","previousSibling","setAccessor","diffAttributes","attrs","inst","Ctor","createComponent","Component","nextBase","recyclerComponents","splice","this","setComponentProps","renderMode","doRender","_disable","prevContext","getDerivedStateFromProps","base","syncComponentUpdates","prevProps","state","skip","previousProps","previousState","prevState","previousContext","initialChildComponent","snapshot","rendered","shouldComponentUpdate","cbase","componentWillUpdate","getChildContext","getSnapshotBeforeUpdate","childComponent","childProps","getNodeProps","toUnmount","_parentComponent","baseParent","initialBase","componentRef","t","_componentConstructor","afterUpdate","_renderCallbacks","isChild","originalComponent","isDirectOwner","isOwner","oldDom","beforeUnmount","inner","__ref","defer","Promise","resolve","then","bind","setTimeout","FORCE_RENDER","setState","callback","prototype","forceUpdate","render","diff","createRef","module","exports","Omis","self"],"mappings":"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","file":"omis.min.js","sourcesContent":["import options from './options'\n\nlet styleId = 0\n\nexport function getCtorName(ctor) {\n  for (let i = 0, len = options.styleCache.length; i < len; i++) {\n    let item = options.styleCache[i]\n\n    if (item.ctor === ctor) {\n      return item.attrName\n    }\n  }\n\n  let attrName = '_ss' + styleId\n  options.styleCache.push({ ctor, attrName })\n  styleId++\n\n  return attrName\n}\n\n// many thanks to https://github.com/thomaspark/scoper/\nexport function scoper(css, prefix) {\n  prefix = '[' + prefix.toLowerCase() + ']'\n  // https://www.w3.org/TR/css-syntax-3/#lexical\n  css = css.replace(/\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\//g, '')\n  // eslint-disable-next-line\n    let re = new RegExp('([^\\r\\n,{}:]+)(:[^\\r\\n,{}]+)?(,(?=[^{}]*{)|\\s*{)', 'g')\n  /**\n   * Example:\n   *\n   * .classname::pesudo { color:red }\n   *\n   * g1 is normal selector `.classname`\n   * g2 is pesudo class or pesudo element\n   * g3 is the suffix\n   */\n  css = css.replace(re, (g0, g1, g2, g3) => {\n    if (typeof g2 === 'undefined') {\n      g2 = ''\n    }\n\n    /* eslint-ignore-next-line */\n    if (\n      g1.match(\n        /^\\s*(@media|\\d+%?|@-webkit-keyframes|@keyframes|to|from|@font-face)/\n      )\n    ) {\n      return g1 + g2 + g3\n    }\n\n    let appendClass = g1.replace(/(\\s*)$/, '') + prefix + g2\n    //let prependClass = prefix + ' ' + g1.trim() + g2;\n\n    return appendClass + g3\n    //return appendClass + ',' + prependClass + g3;\n  })\n\n  return css\n}\n\nexport function addStyle(cssText, id) {\n  id = id.toLowerCase()\n  let ele = document.getElementById(id)\n  let head = document.getElementsByTagName('head')[0]\n  if (ele && ele.parentNode === head) {\n    head.removeChild(ele)\n  }\n\n  let someThingStyles = document.createElement('style')\n  head.appendChild(someThingStyles)\n  someThingStyles.setAttribute('type', 'text/css')\n  someThingStyles.setAttribute('id', id)\n  if (window.ActiveXObject) {\n    someThingStyles.styleSheet.cssText = cssText\n  } else {\n    someThingStyles.textContent = cssText\n  }\n}\n\nexport function addScopedAttrStatic(vdom, attr) {\n  if (options.scopedStyle) {\n    scopeVdom(attr, vdom)\n  }\n}\n\nexport function addStyleToHead(style, attr) {\n\n\tif (!options.staticStyleMapping[attr]) {\n\t\taddStyle(scoper(style, attr), attr)\n\t\toptions.staticStyleMapping[attr] = true\n\t}\n}\n\nexport function scopeVdom(attr, vdom) {\n  if (typeof vdom === 'object') {\n    vdom.attributes = vdom.attributes || {}\n    vdom.attributes[attr] = ''\n    vdom.css = vdom.css || {}\n    vdom.css[attr] = ''\n    vdom.children.forEach(child => scopeVdom(attr, child))\n  }\n}\n\nexport function scopeHost(vdom, css) {\n  if (typeof vdom === 'object' && css) {\n    vdom.attributes = vdom.attributes || {}\n    for (let key in css) {\n      vdom.attributes[key] = ''\n    }\n  }\n}\n","import { VNode } from './vnode';\nimport options from './options';\nimport {getCtorName} from './style'\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility\n * reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a\n * lightweight representation of the structure of a DOM tree. This structure can\n * be realized by recursively comparing it against the current _actual_ DOM\n * structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string | function} nodeName An element name. Ex: `div`, `a`, `span`, etc.\n * @param {object | null} attributes Any attributes/props to set on the created element.\n * @param {VNode[]} [rest] Additional arguments are taken to be children to\n *  append. Can be infinitely nested Arrays.\n *\n * @public\n */\nexport function h(nodeName, attributes) {\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children!=null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse {\n\t\t\tif (typeof child==='boolean') child = null;\n\n\t\t\tif ((simple = typeof nodeName!=='function')) {\n\t\t\t\tif (child==null) child = '';\n\t\t\t\telse if (typeof child==='number') child = String(child);\n\t\t\t\telse if (typeof child!=='string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse if (children===EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tlet p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes==null ? {} : attributes;\n\tif(options.runTimeComponent){\n\t\tif(options.runTimeComponent.constructor.css){\n\t\t\tp.attributes[getCtorName(options.runTimeComponent.constructor)] = ''\n\t\t}\n\t\tif(options.runTimeComponent.props && options.runTimeComponent.props.css){\n\t\t\tp.attributes['_ds'+options.runTimeComponent.elementId] = ''\n\t\t}\n\t}\n\n\tp.key = p.attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode!==undefined) options.vnode(p);\n\n\treturn p;\n}\n","/**\n * Copy all properties from `props` onto `obj`.\n * @param {object} obj Object onto which properties should be copied.\n * @param {object} props Object from which to copy properties.\n * @returns {object}\n * @private\n */\nexport function extend(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/** Invoke or update a ref, depending on whether it is a function or object ref.\n *  @param {object|function} [ref=null]\n *  @param {any} [value]\n */\nexport function applyRef(ref, value) {\n\tif (ref) {\n\t\tif (typeof ref=='function') ref(value);\n\t\telse ref.current = value;\n\t}\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n * @type {(callback: function) => void}\n */\nexport const defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n","import { extend } from './util';\nimport { h } from './h';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {import('./vnode').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./vnode').VNode>} [rest] Any additional arguments will be used as replacement\n *  children.\n */\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(extend({}, vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","// render modes\n\n/** Do not re-render a component */\nexport const NO_RENDER = 0;\n/** Synchronously re-render a component and its children */\nexport const SYNC_RENDER = 1;\n/** Synchronously re-render a component, even if its lifecycle methods attempt to prevent it. */\nexport const FORCE_RENDER = 2;\n/** Queue asynchronous re-render of a component and it's children */\nexport const ASYNC_RENDER = 3;\n\n\nexport const ATTR_KEY = 'prevProps';\n\n/** DOM properties that should NOT have \"px\" added when numeric */\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n","import options from './options';\nimport { defer } from './util';\nimport { renderComponent } from './vdom/component';\n\n/**\n * Managed queue of dirty components to be re-rendered\n * @type {Array<import('./component').Component>}\n */\nlet items = [];\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./component').Component} component The component to rerender\n */\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\n/** Rerender all enqueued dirty components */\nexport function rerender() {\n\tlet p;\n\twhile ( (p = items.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { extend } from '../util';\n\n\n/**\n * Check if two nodes are equivalent.\n * @param {import('../dom').PreactElement} node DOM Node to compare\n * @param {import('../vnode').VNode} vnode Virtual DOM node to compare\n * @param {boolean} [hydrating=false] If true, ignores component constructors\n *  when comparing.\n * @private\n */\nexport function isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\t\treturn node.splitText!==undefined;\n\t}\n\tif (typeof vnode.nodeName==='string') {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\treturn hydrating || node._componentConstructor===vnode.nodeName;\n}\n\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n * @param {import('../dom').PreactElement} node A DOM Element to inspect the name of.\n * @param {string} nodeName Unnormalized name to compare against.\n */\nexport function isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName===nodeName || node.nodeName.toLowerCase()===nodeName.toLowerCase();\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n * @param {import('../vnode').VNode} vnode The VNode to get props for\n * @returns {object} The props to use for this VNode\n */\nexport function getNodeProps(vnode) {\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps!==undefined) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport { applyRef } from '../util';\nimport options from '../options';\n\n/**\n * A DOM event listener\n * @typedef {(e: Event) => void} EventListner\n */\n\n/**\n * A mapping of event types to event listeners\n * @typedef {Object.<string, EventListener>} EventListenerMap\n */\n\n/**\n * Properties Preact adds to elements it creates\n * @typedef PreactElementExtensions\n * @property {string} [normalizedNodeName] A normalized node name to use in diffing\n * @property {EventListenerMap} [_listeners] A map of event listeners added by components to this DOM node\n * @property {import('../component').Component} [_component] The component that rendered this DOM node\n * @property {function} [_componentConstructor] The constructor of the component that rendered this DOM node\n */\n\n/**\n * A DOM element that has been extended with Preact properties\n * @typedef {Element & ElementCSSInlineStyle & PreactElementExtensions} PreactElement\n */\n\n/**\n * Create an element with the given nodeName.\n * @param {string} nodeName The DOM node to create\n * @param {boolean} [isSvg=false] If `true`, creates an element within the SVG\n *  namespace.\n * @returns {PreactElement} The created DOM node\n */\nexport function createNode(nodeName, isSvg) {\n\t/** @type {PreactElement} */\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n\n/**\n * Remove a child node from its parent if attached.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n\n/**\n * Set a named attribute on the given Node, with special behavior for some names\n * and event handlers. If `value` is `null`, the attribute/handler will be\n * removed.\n * @param {PreactElement} node An element to mutate\n * @param {string} name The name/key to set, such as an event or attribute name\n * @param {*} old The last value that was set for this name/node pair\n * @param {*} value An attribute value, such as a function to be used as an\n *  event handler\n * @param {boolean} isSvg Are we currently diffing inside an svg?\n * @private\n */\nexport function setAccessor(node, name, old, value, isSvg, store) {\n\tif (name==='className') name = 'class';\n\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='ref') {\n\t\tapplyRef(old, null);\n\t\tapplyRef(value, node);\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (typeof old!=='string') {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value ? value.bind(store) : value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\t// Attempt to set a DOM property to the given value.\n\t\t// IE & FF throw for certain property-value combinations.\n\t\ttry {\n\t\t\tnode[name] = value==null ? '' : value;\n\t\t} catch (e) { }\n\t\tif ((value==null || value===false) && name!='spellcheck') node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink:?/, '')));\n\t\t// spellcheck is treated differently than all other boolean values and\n\t\t// should not be removed when the value is `false`. See:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-spellcheck\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { ATTR_KEY } from '../constants';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { buildComponentFromVNode } from './component';\nimport { createNode, setAccessor } from '../dom/index';\nimport { unmountComponent } from './component';\nimport options from '../options';\nimport { applyRef } from '../util';\nimport { removeNode } from '../dom/index';\nimport { addStyleToHead, getCtorName } from '../style'\n\n/**\n * Queue of components that have been mounted and are awaiting componentDidMount\n * @type {Array<import('../component').Component>}\n */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c = mounts.shift())) {\n\t\tif (c.constructor.css) {\n      addStyleToHead(c.constructor.css, getCtorName(c.constructor))\n\t\t}\n\t\tif(c.props.css){\n\t\t\taddStyleToHead(c.props.css, '_ds'+c.elementId)\n\t\t}\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n\n/**\n * Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n * @param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a `vnode`\n * @param {import('../vnode').VNode} vnode A VNode (with descendants forming a tree) representing\n *  the desired DOM structure\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {Element} parent ?\n * @param {boolean} componentRoot ?\n * @returns {import('../dom').PreactElement} The created/mutated element\n * @private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot, store) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret = idiff(dom, vnode, context, mountAll, componentRoot, store);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (!--diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n\n/**\n * Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing.\n * @param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a `vnode`\n * @param {import('../vnode').VNode} vnode A VNode (with descendants forming a tree) representing the desired DOM structure\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {boolean} [componentRoot] ?\n * @private\n */\nfunction idiff(dom, vnode, context, mountAll, componentRoot, store) {\n\tlet out = dom,\n\t\tprevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode==null || typeof vnode==='boolean') vnode = '';\n\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout[ATTR_KEY] = true;\n\n\t\treturn out;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff:\n\tlet vnodeName = vnode.nodeName;\n\tif (typeof vnodeName==='function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName==='svg' ? true : vnodeName==='foreignObject' ? false : isSvgMode;\n\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY],\n\t\tvchildren = vnode.children;\n\n\tif (props==null) {\n\t\tprops = out[ATTR_KEY] = {};\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling==null) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc!=null) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null, store);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props, store);\n\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/**\n * Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n * @param {import('../dom').PreactElement} dom Element whose children should be compared & mutated\n * @param {Array<import('../vnode').VNode>} vchildren Array of VNodes to compare to `dom.childNodes`\n * @param {object} context Implicitly descendant context object (from most\n *  recent `getChildContext()`)\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {boolean} isHydrating if `true`, consumes externally created elements\n *  similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating, store) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren ? vchildren.length : 0,\n\t\tj, c, f, vchild, child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len!==0) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen!==0) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll, null, store);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child!==dom && child!==f) {\n\t\t\t\tif (f==null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child===f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min<=childrenLen) {\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\n\t}\n}\n\n\n\n/**\n * Recursively recycle (or just unmount) a node and its descendants.\n * @param {import('../dom').PreactElement} node DOM node to start\n *  unmount/removal from\n * @param {boolean} [unmountOnly=false] If `true`, only triggers unmount\n *  lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY]!=null) applyRef(node[ATTR_KEY].ref, null);\n\n\t\tif (unmountOnly===false || node[ATTR_KEY]==null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n\n/**\n * Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nexport function removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tlet next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n\n/**\n * Apply differences in attributes from a VNode to the given DOM Element.\n * @param {import('../dom').PreactElement} dom Element with attributes to diff `attrs` against\n * @param {object} attrs The desired end-state key-value attribute pairs\n * @param {object} old Current/previous attributes (from previous VNode or\n *  element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old, store) {\n\tlet name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode, store);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode, store);\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/**\n * Retains a pool of Components for re-use.\n * @type {Component[]}\n * @private\n */\nexport const recyclerComponents = [];\n\n\n/**\n * Create a component. Normalizes differences between PFC's and classful\n * Components.\n * @param {function} Ctor The constructor of the component to create\n * @param {object} props The initial props of the component\n * @param {object} context The initial context of the component\n * @returns {import('../component').Component}\n */\nexport function createComponent(Ctor, props, context) {\n\tlet inst, i = recyclerComponents.length;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t}\n\telse {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t\tif(Ctor.store){\n\t\t\tinst.store = Ctor.store(inst)\n\t\t\tinst.store.update = inst.forceUpdate.bind(inst)\n\t\t}\n\t}\n\n\n\twhile (i--) {\n\t\tif (recyclerComponents[i].constructor===Ctor) {\n\t\t\tinst.nextBase = recyclerComponents[i].nextBase;\n\t\t\trecyclerComponents.splice(i, 1);\n\t\t\treturn inst;\n\t\t}\n\t}\n\n\treturn inst;\n}\n\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props) {\n\treturn this.constructor(props, this.store);\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { extend, applyRef } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';\nimport { createComponent, recyclerComponents } from './component-recycler';\nimport { removeNode } from '../dom/index';\n\n/**\n * Set a component's `props` and possibly re-render the component\n * @param {import('../component').Component} component The Component to set props on\n * @param {object} props The new props\n * @param {number} renderMode Render options - specifies how to re-render the component\n * @param {object} context The new context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n */\nexport function setComponentProps(component, props, renderMode, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tcomponent.__ref = props.ref;\n\tcomponent.__key = props.key;\n\tdelete props.ref;\n\tdelete props.key;\n\n\tif (typeof component.constructor.getDerivedStateFromProps === 'undefined') {\n\t\tif (!component.base || mountAll) {\n\t\t\tif (component.componentWillMount) component.componentWillMount();\n\t\t}\n\t\telse if (component.componentWillReceiveProps) {\n\t\t\tcomponent.componentWillReceiveProps(props, context);\n\t\t}\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (renderMode!==NO_RENDER) {\n\t\tif (renderMode===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tapplyRef(component.__ref, component);\n}\n\n\n\n/**\n * Render a Component, triggering necessary lifecycle events and taking\n * High-Order Components into account.\n * @param {import('../component').Component} component The component to render\n * @param {number} [renderMode] render mode, see constants.js for available options.\n * @param {boolean} [mountAll] Whether or not to immediately mount all components\n * @param {boolean} [isChild] ?\n * @private\n */\nexport function renderComponent(component, renderMode, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet props = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tskip = false,\n\t\tsnapshot = previousContext,\n\t\trendered, inst, cbase;\n\n\tif (component.constructor.getDerivedStateFromProps) {\n\t\tstate = extend(extend({}, state), component.constructor.getDerivedStateFromProps(props, state));\n\t\tcomponent.state = state;\n\t}\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (renderMode!==FORCE_RENDER\n\t\t\t&& component.shouldComponentUpdate\n\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t}\n\t\telse if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\toptions.runTimeComponent = component\n\t\trendered = component.render(props, state, context);\n\t\toptions.runTimeComponent = null\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tif (isUpdate && component.getSnapshotBeforeUpdate) {\n\t\t\tsnapshot = component.getSnapshotBeforeUpdate(previousProps, previousState);\n\t\t}\n\n\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\ttoUnmount, base;\n\n\t\tif (typeof childComponent==='function') {\n\t\t\t// set up high order component link\n\n\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context, false);\n\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t}\n\t\telse {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || renderMode===SYNC_RENDER) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true, component.store);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tlet componentRef = component,\n\t\t\t\tt = component;\n\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.push(component);\n\t}\n\telse if (!skip) {\n\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t// flushMounts();\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, snapshot);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\twhile (component._renderCallbacks.length) component._renderCallbacks.pop().call(component);\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/**\n * Apply the Component referenced by a VNode to the DOM.\n * @param {import('../dom').PreactElement} dom The DOM node to mutate\n * @param {import('../vnode').VNode} vnode A Component-referencing VNode\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @returns {import('../dom').PreactElement} The created/mutated element\n * @private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/**\n * Remove a component from the DOM and recycle it.\n * @param {import('../component').Component} component The Component instance to unmount\n * @private\n */\nexport function unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tlet base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY]!=null) applyRef(base[ATTR_KEY].ref, null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\trecyclerComponents.push(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tapplyRef(component.__ref, null);\n}\n","import { FORCE_RENDER } from './constants';\nimport { extend } from './util';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n/**\n * Base Component class.\n * Provides `setState()` and `forceUpdate()`, which trigger rendering.\n * @typedef {object} Component\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components' getChildContext\n * @public\n *\n * @example\n * class MyFoo extends Component {\n *   render(props, state) {\n *     return <div />;\n *   }\n * }\n */\n\n let id = 0\n\nexport function Component(props, context) {\n\tthis._dirty = true;\n\tthis.elementId = id++\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.context = context;\n\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.props = props;\n\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.state = this.state || {};\n\n\tthis._renderCallbacks = [];\n}\n\n\nextend(Component.prototype, {\n\n\t/**\n\t * Update component state and schedule a re-render.\n\t * @param {object} state A dict of state properties to be shallowly merged\n\t * \tinto the current state, or a function that will produce such a dict. The\n\t * \tfunction is called with the current state and props.\n\t * @param {() => void} callback A function to be called once component state is\n\t * \tupdated\n\t */\n\tsetState(state, callback) {\n\t\tif (!this.prevState) this.prevState = this.state;\n\t\tthis.state = extend(\n\t\t\textend({}, this.state),\n\t\t\ttypeof state === 'function' ? state(this.state, this.props) : state\n\t\t);\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/**\n\t * Immediately perform a synchronous re-render of the component.\n\t * @param {() => void} callback A function to be called after component is\n\t * \tre-rendered.\n\t * @private\n\t */\n\tforceUpdate(callback) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/**\n\t * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t * @param {object} props Props (eg: JSX attributes) received from parent\n\t * \telement/component\n\t * @param {object} state The component's current state\n\t * @param {object} context Context object, as returned by the nearest\n\t *  ancestor's `getChildContext()`\n\t * @returns {import('./vnode').VNode | void}\n\t */\n\trender() {}\n\n});\n","/**\n * Virtual DOM Node\n * @typedef VNode\n * @property {string | function} nodeName The string of the DOM node to create or Component constructor to render\n * @property {Array<VNode | string>} children The children of node\n * @property {string | number | undefined} key The key used to identify this VNode in a list\n * @property {object} attributes The properties of this VNode\n */\nexport const VNode = function VNode() {};\n","/**\n * @typedef {import('./component').Component} Component\n * @typedef {import('./vnode').VNode} VNode\n */\n\n/**\n * Global options\n * @public\n * @typedef Options\n * @property {boolean} [syncComponentUpdates] If `true`, `prop` changes trigger synchronous component updates. Defaults to true.\n * @property {(vnode: VNode) => void} [vnode] Processes all created VNodes.\n * @property {(component: Component) => void} [afterMount] Hook invoked after a component is mounted.\n * @property {(component: Component) => void} [afterUpdate] Hook invoked after the DOM is updated with a component's latest render.\n * @property {(component: Component) => void} [beforeUnmount] Hook invoked immediately before a component is unmounted.\n * @property {(rerender: function) => void} [debounceRendering] Hook invoked whenever a rerender is requested. Can be used to debounce rerenders.\n * @property {(event: Event) => Event | void} [event] Hook invoked before any Preact event listeners. The return value (if any) replaces the native browser event given to event listeners\n */\n\n/** @type {Options}  */\nconst options = {\n\trunTimeComponent: {},\n\tstyleCache: [],\n\tstaticStyleMapping: {}\n};\n\nexport default options;\n","import { diff } from './vdom/diff';\n\n/**\n * Render JSX into a `parent` Element.\n * @param {import('./vnode').VNode} vnode A (JSX) VNode to render\n * @param {import('./dom').PreactElement} parent DOM element to render into\n * @param {import('./dom').PreactElement} [merge] Attempt to re-use an existing DOM tree rooted at\n *  `merge`\n * @public\n *\n * @example\n * // render a div into <body>:\n * render(<div id=\"hello\">hello!</div>, document.body);\n *\n * @example\n * // render a \"Thing\" component into #foo:\n * const Thing = ({ name }) => <span>{ name }</span>;\n * render(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, typeof parent === 'string' ? document.querySelector(parent) : parent, false);\n}\n","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nfunction createRef() {\n\treturn {};\n}\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tcreateRef,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tcreateRef,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nif(typeof window !== 'undefined'){\n\twindow.Omis = {\n\t\th,\n\t\tcreateElement,\n\t\tcloneElement,\n\t\tcreateRef,\n\t\tComponent,\n\t\trender,\n\t\trerender,\n\t\toptions\n\t};\n}\n"]}